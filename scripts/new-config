#!/bin/bash
set -o pipefail
CLAMAV_LATEST=$1
mkdir configs/
cat << EOF > configs/generated_config.yml
version: 2.1

# This gets triggered by the setup config
parameters:
  require-update:
    description: Decide wether or not the build will make the zip and push it
    type: boolean
    default: false

# Machine image required for building zip on arm64 architecture - all docker executors are natively x86
runs-on: &runs-on
  resource_class: arm.medium
  machine:
    image: ubuntu-2004:current

# Setup for assume role with open ID and running CLI commands
orbs:
  aws-cli: circleci/aws-cli@3.1

jobs:
  pre-commit-deps:
    <<: *runs-on
    steps:
      - checkout
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run: pip3 install pre-commit
      - run: pre-commit install-hooks
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit

  pre-commit-test:
    <<: *runs-on
    steps:
      - checkout
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run: pip3 install pre-commit
      - run: pre-commit run --all-files

  build:
    <<: *runs-on
    steps:
      - checkout
      - run:
          name: Making zip
          command: make all
      - persist_to_workspace:
          root: build
          paths:
            - lambda.zip
  deploy:
    <<: *runs-on
    parameters:
      region:
        type: string
      bucket:
        type: string
      env-role-arn:
        type: string
    steps:
      - checkout
      - attach-workspace:
          at: ./build
      - aws-cli/setup:
          role-arn: << parameters.env-role-arn >>
          aws-region: << parameters.region >>
      - run:
          name: Copying lambda-$CLAMAV_LATEST.zip to << parameters.bucket >>
          command: aws s3 cp ./build/lambda.zip s3://<< parameters.bucket >>/lambda-$CLAMAV_LATEST.zip

  # To prevent second step from erroring out if update not required
  update:
    <<: *runs-on
    steps:
      - run: echo "Update not required"

workflows:
  version: 2
  build-and-deploy:
    when: << pipeline.parameters.require-update >>
    jobs:
      - pre-commit-deps
      - pre-commit-test:
          requires:
            - pre-commit-deps
      - build
      - deploy:
          region: DEFAULT_REGION
          bucket: $S3_BUCKET
          env-role-arn: $CIRCLECI_ROLE_ARN
          context:
            - aws
          requires:
            - build
            - pre-commit-test

  status-update:
    when:
      not:  <<pipeline.parameters.require-update >>
    jobs:
      - update